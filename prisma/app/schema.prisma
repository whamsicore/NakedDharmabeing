// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/app"
}

datasource db {
  provider = "sqlite"
  url      = "file:./app.db"
}

model Dharmabeing {
  id                Int      @id @default(autoincrement())
  name              String
  type              String
  attributes        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  permissions       String
  conversations     Conversation[]
}

model Dao {
  id                Int          @id @default(autoincrement())
  name              String
  description       String?
  energy            Int
  treasury          Int
  accounts          String?
  canvas            String?       // Contains all the information about the DAO's main interface.
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  parentId          Int?         
  parent            Dao?         @relation("ancestry", fields: [parentId], references: [id])
  children          Dao[]        @relation("ancestry")
  portals           Portal[]     @relation("daoPortals")
}

model Portal {
  id        Int      @id @default(autoincrement())
  daoId     Int
  dao       Dao      @relation("daoPortals", fields: [daoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



//****************
// Permissions Module
//****************

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  hashedPassword String?
  roles         Role[]          @relation("userRoles")
  sessions      Session[]
  memories      UserMemory[]
  conversations Conversation[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[] @relation("rolePermissions")
  users       User[]       @relation("userRoles")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[] @relation("rolePermissions")
  actions DharmaAction[] @relation("actionPermissions")
}

model DharmaAction {
  id            Int          @id @default(autoincrement())
  name          String
  permissions   Permission[] @relation("actionPermissions")
}

model Conversation {
  id            Int          @id @default(autoincrement())
  content       String
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  dharmabeingId Int
  dharmabeing   Dharmabeing  @relation(fields: [dharmabeingId], references: [id])
}

model UserMemory {
  id        Int     @id @default(autoincrement())
  content   String
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Session {
  id                Int      @id @default(autoincrement())
  expiresAt         DateTime
  hashedSessionToken String  @unique
  antiCSRFToken     String   @unique
  publicData        String?
  privateData       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

//****************
// Meta Model
//****************

model Database {
  id       Int     @id @default(autoincrement())
  name     String
  models   Model[]
}

model Model {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  databaseId    Int
  attributes    Attribute[]
  table         Database      @relation(fields: [databaseId], references: [id])
  relationshipsFrom Relationship[] @relation("ModelFrom")
  relationshipsTo   Relationship[] @relation("ModelTo")
}

model Attribute {
  id           Int     @id @default(autoincrement())
  name         String
  dataType     String
  constraints  String?
  isPrimaryKey Boolean @default(false)
  foreignKeyTo String?
  modelId      Int
  model        Model   @relation(fields: [modelId], references: [id])
}

model Relationship {
  id          Int    @id @default(autoincrement())
  modelIdFrom Int
  modelIdTo   Int
  type        String
  onDelete    String?
  onUpdate    String?
  modelFrom   Model  @relation("ModelFrom", fields: [modelIdFrom], references: [id])
  modelTo     Model  @relation("ModelTo", fields: [modelIdTo], references: [id])
}

model File {
  id       Int    @id @default(autoincrement())
  fileName String
  fileType String
  filePath String
  hash     String @unique
}

//****************
// Governance Model
//****************


//****************
// Tests
//****************
// The purpose of this is to have awareness of the tests that are available for us to run, even in production. Yes, we have the ability to test in production, just as we have the ability to develop in production.
model Test {
  id          Int      @id @default(autoincrement())
  testName    String
  description String
  testType    String   // E.g., "unit", "integration", "end-to-end"
  filePath    String   // Path to the test file
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  executions  Execution[]
}

model Execution {
  id        Int      @id @default(autoincrement())
  testId    Int
  status    String   // E.g., "passed", "failed"
  output    String?  // Store serialized output or error messages
  createdAt DateTime @default(now())
  test      Test     @relation(fields: [testId], references: [id])
}


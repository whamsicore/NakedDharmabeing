{"version":3,"sources":["../../src/utils/stream.ts","../../src/utils/openai.ts"],"sourcesContent":["import { AnnotatedFunction, parseChatCompletion } from \"@copilotkit/shared\";\nimport {\n  writeChatCompletionChunk,\n  writeChatCompletionContent,\n  writeChatCompletionEnd,\n  writeChatCompletionResult,\n} from \"./openai\";\n\n/**\n * Execute a function call and write the result to the stream.\n * TODO: should this return a stream to get process other function calls?\n */\nasync function executeFunctionCall(\n  controller: ReadableStreamDefaultController<any>,\n  fun: AnnotatedFunction<any[]>,\n  functionCallArguments: string,\n): Promise<void> {\n  // Prepare arguments for function calling\n  let args: Record<string, any>[] = [];\n  if (functionCallArguments) {\n    args = JSON.parse(functionCallArguments);\n  }\n  const paramsInCorrectOrder: any[] = [];\n  for (let arg of fun.argumentAnnotations) {\n    paramsInCorrectOrder.push(args[arg.name as keyof typeof args]);\n  }\n\n  // call the function\n  const result = await fun.implementation(...paramsInCorrectOrder);\n\n  // We support several types of return values from functions:\n\n  // 1. string\n  // Just send the result as the content of the chunk.\n  if (typeof result === \"string\") {\n    writeChatCompletionResult(controller, fun.name, result);\n  }\n\n  // 2. AIMessage\n  // Send the content and function call of the AIMessage as the content of the chunk.\n  else if (\"content\" in result && typeof result.content === \"string\") {\n    writeChatCompletionContent(controller, result.content, result.additional_kwargs?.tool_calls);\n  }\n\n  // 3. BaseMessageChunk\n  // Send the content and function call of the AIMessage as the content of the chunk.\n  else if (\"lc_kwargs\" in result) {\n    writeChatCompletionContent(controller, result.lc_kwargs?.content, result.lc_kwargs?.tool_calls);\n  }\n\n  // 4. IterableReadableStream\n  // Stream the result of the LangChain function.\n  else if (\"getReader\" in result) {\n    let reader = result.getReader();\n    while (true) {\n      try {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          break;\n        }\n\n        writeChatCompletionContent(\n          controller,\n          value?.lc_kwargs?.content,\n          value.lc_kwargs?.additional_kwargs?.tool_calls,\n        );\n      } catch (error) {\n        console.error(\"Error reading from stream\", error);\n        break;\n      }\n    }\n  }\n\n  // 5. Any other type, return JSON result\n  else {\n    writeChatCompletionResult(controller, fun.name, result);\n  }\n}\n\n/**\n * This function decides what to handle server side and what to forward to the client.\n * It also handles the execution of server side functions.\n *\n * TODO: add proper error handling and logging\n */\nexport function copilotkitStreamInterceptor(\n  stream: ReadableStream<Uint8Array>,\n  functions: AnnotatedFunction<any[]>[],\n  debug: boolean = false,\n): ReadableStream {\n  const functionsByName = functions.reduce((acc, fn) => {\n    acc[fn.name] = fn;\n    return acc;\n  }, {} as Record<string, AnnotatedFunction<any[]>>);\n\n  const decodedStream = parseChatCompletion(stream);\n  const reader = decodedStream.getReader();\n\n  async function cleanup(controller?: ReadableStreamDefaultController<any>) {\n    if (controller) {\n      try {\n        controller.close();\n      } catch (_) {}\n    }\n    if (reader) {\n      try {\n        await reader.cancel();\n      } catch (_) {}\n    }\n  }\n\n  // Keep track of current state as we process the stream\n\n  // Loop Invariant:\n  // Either we are in the middle of a function call that should be executed on the backend = TRUE\n  // or we are in the middle of processing a chunk that should be forwarded to the client = FALSE\n  let executeThisFunctionCall = false;\n\n  let functionCallName = \"\";\n  let functionCallArguments = \"\";\n\n  let currentFnIndex = 0;\n\n  const flushFunctionCall = async (\n    controller: ReadableStreamDefaultController<any>,\n  ): Promise<void> => {\n    const fun = functionsByName[functionCallName];\n    await executeFunctionCall(controller, fun, functionCallArguments);\n\n    executeThisFunctionCall = false;\n    functionCallName = \"\";\n    functionCallArguments = \"\";\n  };\n\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        try {\n          const { done, value } = await reader.read();\n          if (done) {\n            if (debug) {\n              console.log(\"data: [DONE]\\n\\n\");\n            }\n            if (executeThisFunctionCall) {\n              // We are at the end of the stream and still have a function call to execute\n              await flushFunctionCall(controller);\n            }\n            writeChatCompletionEnd(controller);\n            await cleanup(controller);\n            return;\n          } else if (debug) {\n            console.log(\"data: \" + JSON.stringify(value) + \"\\n\\n\");\n          }\n\n          let mode: \"function\" | \"message\" = value.choices[0].delta.tool_calls\n            ? \"function\"\n            : \"message\";\n\n          const index = (value.choices[0].delta.tool_calls?.[0]?.index || 0) as number;\n\n          // We are in the middle of a function call and got a non function call chunk\n          // or a different function call\n          // => execute the function call first\n          if (executeThisFunctionCall && (mode != \"function\" || index != currentFnIndex)) {\n            await flushFunctionCall(controller);\n          }\n\n          currentFnIndex = index;\n\n          // if we get a message, emit the content and continue;\n          if (mode === \"message\") {\n            if (value.choices[0].delta.content) {\n              writeChatCompletionChunk(controller, value);\n            }\n            continue;\n          }\n          // if we get a function call, emit it only if we don't execute it server side\n          else if (mode === \"function\") {\n            // Set the function name if present\n            if (value.choices[0].delta.tool_calls?.[0]?.function?.name) {\n              functionCallName = value.choices[0].delta.tool_calls![0].function.name!;\n            }\n            // If we have argument streamed back, add them to the function call arguments\n            if (value.choices[0].delta.tool_calls?.[0]?.function?.arguments) {\n              functionCallArguments += value.choices[0].delta.tool_calls![0].function.arguments!;\n            }\n            if (!executeThisFunctionCall) {\n              // Decide if we should execute the function call server side\n              if (functionCallName in functionsByName) {\n                executeThisFunctionCall = true;\n              }\n            }\n\n            if (value.choices[0].delta.tool_calls) {\n              // To avoid the client executing the function call as well, we set the scope to \"server\"\n              value.choices[0].delta.tool_calls[0].function.scope = executeThisFunctionCall\n                ? \"server\"\n                : \"client\";\n            }\n            writeChatCompletionChunk(controller, value);\n            continue;\n          }\n        } catch (error) {\n          controller.error(error);\n          return;\n        }\n      }\n    },\n    cancel() {\n      reader.cancel();\n    },\n  });\n}\n","import { Message, ToolDefinition, ChatCompletionChunk, encodeResult } from \"@copilotkit/shared\";\n\nexport function writeChatCompletionChunk(\n  controller: ReadableStreamDefaultController<any>,\n  chunk: ChatCompletionChunk,\n) {\n  const payload = new TextEncoder().encode(\"data: \" + JSON.stringify(chunk) + \"\\n\\n\");\n  controller!.enqueue(payload);\n}\n\nexport function writeChatCompletionContent(\n  controller: ReadableStreamDefaultController<any>,\n  content: string = \"\",\n  toolCalls?: any,\n) {\n  const chunk: ChatCompletionChunk = {\n    choices: [\n      {\n        delta: {\n          role: \"assistant\",\n          content: content,\n          ...(toolCalls ? { tool_calls: toolCalls } : {}),\n        },\n      },\n    ],\n  };\n\n  writeChatCompletionChunk(controller, chunk);\n}\n\nexport function writeChatCompletionResult(\n  controller: ReadableStreamDefaultController<any>,\n  functionName: string,\n  result: any,\n) {\n  let resultString = encodeResult(result);\n\n  const chunk: ChatCompletionChunk = {\n    choices: [\n      {\n        delta: {\n          role: \"function\",\n          content: resultString,\n          name: functionName,\n        },\n      },\n    ],\n  };\n\n  writeChatCompletionChunk(controller, chunk);\n}\n\nexport function writeChatCompletionEnd(controller: ReadableStreamDefaultController<any>) {\n  const payload = new TextEncoder().encode(\"data: [DONE]\\n\\n\");\n  controller.enqueue(payload);\n}\n\nexport function limitOpenAIMessagesToTokenCount(\n  messages: Message[],\n  tools: ToolDefinition[],\n  maxTokens: number,\n): Message[] {\n  const result: Message[] = [];\n  const toolsNumTokens = countToolsTokens(tools);\n  if (toolsNumTokens > maxTokens) {\n    throw new Error(`Too many tokens in function definitions: ${toolsNumTokens} > ${maxTokens}`);\n  }\n  maxTokens -= toolsNumTokens;\n\n  for (const message of messages) {\n    if (message.role === \"system\") {\n      const numTokens = countMessageTokens(message);\n      maxTokens -= numTokens;\n\n      if (maxTokens < 0) {\n        throw new Error(\"Not enough tokens for system message.\");\n      }\n    }\n  }\n\n  let cutoff: boolean = false;\n\n  const reversedMessages = [...messages].reverse();\n  for (const message of reversedMessages) {\n    if (message.role === \"system\") {\n      result.unshift(message);\n      continue;\n    } else if (cutoff) {\n      continue;\n    }\n    let numTokens = countMessageTokens(message);\n    if (maxTokens < numTokens) {\n      cutoff = true;\n      continue;\n    }\n    result.unshift(message);\n    maxTokens -= numTokens;\n  }\n\n  return result;\n}\n\nexport function maxTokensForOpenAIModel(model: string): number {\n  return maxTokensByModel[model] || DEFAULT_MAX_TOKENS;\n}\n\nconst DEFAULT_MAX_TOKENS = 8192;\n\nconst maxTokensByModel: { [key: string]: number } = {\n  \"gpt-3.5-turbo\": 4097,\n  \"gpt-3.5-turbo-16k\": 16385,\n  \"gpt-4\": 8192,\n  \"gpt-4-1106-preview\": 8192,\n  \"gpt-4-32k\": 32768,\n  \"gpt-3.5-turbo-0301\": 4097,\n  \"gpt-4-0314\": 8192,\n  \"gpt-4-32k-0314\": 32768,\n  \"gpt-3.5-turbo-0613\": 4097,\n  \"gpt-4-0613\": 8192,\n  \"gpt-4-32k-0613\": 32768,\n  \"gpt-3.5-turbo-16k-0613\": 16385,\n};\n\nfunction countToolsTokens(functions: ToolDefinition[]): number {\n  if (functions.length === 0) {\n    return 0;\n  }\n  const json = JSON.stringify(functions);\n  return countTokens(json);\n}\n\nfunction countMessageTokens(message: Message): number {\n  if (message.content) {\n    return countTokens(message.content);\n  } else if (message.function_call) {\n    return countTokens(JSON.stringify(message.function_call));\n  }\n  return 0;\n}\n\nfunction countTokens(text: string): number {\n  return text.length / 3;\n}\n"],"mappings":"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","names":["import_shared"]}
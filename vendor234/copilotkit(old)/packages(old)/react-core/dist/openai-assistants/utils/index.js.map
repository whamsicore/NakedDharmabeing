{"version":3,"sources":["../../../src/openai-assistants/utils/index.ts","../../../src/openai-assistants/utils/process-message-stream.ts"],"sourcesContent":["export { processMessageStream } from \"./process-message-stream\";\n","export async function processMessageStream(\n  reader: ReadableStreamDefaultReader<Uint8Array>,\n  processMessage: (message: string) => void | Promise<void>,\n) {\n  const decoder = new TextDecoder();\n  let buffer = \"\";\n  while (true) {\n    const { done, value } = await reader.read();\n\n    if (done) {\n      if (buffer.length > 0) {\n        processMessage(buffer);\n      }\n      break;\n    }\n\n    buffer += decoder.decode(value, { stream: true });\n\n    let endIndex: number;\n    while ((endIndex = buffer.indexOf(\"\\n\")) !== -1) {\n      processMessage(buffer.substring(0, endIndex).trim());\n      buffer = buffer.substring(endIndex + 1); // Remove the processed instruction + delimiter\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,SAAsB,qBACpB,QACA,gBACA;AAAA;AACA,UAAM,UAAU,IAAI,YAAY;AAChC,QAAI,SAAS;AACb,WAAO,MAAM;AACX,YAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAE1C,UAAI,MAAM;AACR,YAAI,OAAO,SAAS,GAAG;AACrB,yBAAe,MAAM;AAAA,QACvB;AACA;AAAA,MACF;AAEA,gBAAU,QAAQ,OAAO,OAAO,EAAE,QAAQ,KAAK,CAAC;AAEhD,UAAI;AACJ,cAAQ,WAAW,OAAO,QAAQ,IAAI,OAAO,IAAI;AAC/C,uBAAe,OAAO,UAAU,GAAG,QAAQ,EAAE,KAAK,CAAC;AACnD,iBAAS,OAAO,UAAU,WAAW,CAAC;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA;","names":[]}
{"version":3,"sources":["../src/components/chat/Messages.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { MessagesProps } from \"./props\";\nimport { useChatContext } from \"./ChatContext\";\nimport { nanoid } from \"nanoid\";\nimport { Message } from \"@copilotkit/shared\";\nimport { Markdown } from \"./Markdown\";\n\nexport const Messages = ({ messages, inProgress }: MessagesProps) => {\n  const context = useChatContext();\n  const initialMessages = useMemo(\n    () => makeInitialMessages(context.labels.initial),\n    [context.labels.initial],\n  );\n  messages = [...initialMessages, ...messages];\n\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"auto\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  return (\n    <div className=\"copilotKitMessages\">\n      {messages.map((message, index) => {\n        const isCurrentMessage = index === messages.length - 1;\n\n        if (message.role === \"user\") {\n          return (\n            <div key={index} className=\"copilotKitMessage copilotKitUserMessage\">\n              {message.content}\n            </div>\n          );\n        } else if (message.role == \"assistant\") {\n          if (isCurrentMessage && inProgress && !message.content) {\n            return (\n              <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                {context.icons.spinnerIcon}\n              </div>\n            );\n          } else if (\n            (!inProgress || index != messages.length - 1) &&\n            !message.content &&\n            message.function_call\n          ) {\n            return (\n              <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                {context.labels.done}\n              </div>\n            );\n          }\n          // TODO: Add back partial message\n          // This shows up when the assistant is executing a function\n          //\n          // else if (message.status === \"partial\") {\n          //   return (\n          //     <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n          //       {context.labels.thinking} {context.icons.spinnerIcon}\n          //     </div>\n          //   );\n          // }\n          else {\n            return (\n              <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                <Markdown content={message.content} />\n              </div>\n            );\n          }\n        }\n        // TODO: Add back function and error messages\n        //\n        // else if (message.role === \"function\" && message.status === \"success\") {\n        //   return (\n        //     <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n        //       {context.labels.done}\n        //     </div>\n        //   );\n        // } else if (message.status === \"error\") {\n        //   return (\n        //     <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n        //       {context.labels.error}\n        //     </div>\n        //   );\n        // }\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nfunction makeInitialMessages(initial?: string | string[]): Message[] {\n  let initialArray: string[] = [];\n  if (initial) {\n    if (Array.isArray(initial)) {\n      initialArray.push(...initial);\n    } else {\n      initialArray.push(initial);\n    }\n  }\n\n  return initialArray.map((message) => ({\n    id: nanoid(),\n    role: \"assistant\",\n    content: message,\n  }));\n}\n"],"mappings":";;;;;;;;AAAA,OAAO,SAAS,WAAW,eAAe;AAG1C,SAAS,cAAc;AA2BnB,SAMQ,KANR;AAvBG,IAAM,WAAW,CAAC,EAAE,UAAU,WAAW,MAAqB;AACnE,QAAM,UAAU,eAAe;AAC/B,QAAM,kBAAkB;AAAA,IACtB,MAAM,oBAAoB,QAAQ,OAAO,OAAO;AAAA,IAChD,CAAC,QAAQ,OAAO,OAAO;AAAA,EACzB;AACA,aAAW,CAAC,GAAG,iBAAiB,GAAG,QAAQ;AAE3C,QAAM,iBAAiB,MAAM,OAAuB,IAAI;AAExD,QAAM,iBAAiB,MAAM;AAC3B,QAAI,eAAe,SAAS;AAC1B,qBAAe,QAAQ,eAAe;AAAA,QACpC,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;AAEA,YAAU,MAAM;AACd,mBAAe;AAAA,EACjB,GAAG,CAAC,QAAQ,CAAC;AAEb,SACE,qBAAC,SAAI,WAAU,sBACZ;AAAA,aAAS,IAAI,CAAC,SAAS,UAAU;AAChC,YAAM,mBAAmB,UAAU,SAAS,SAAS;AAErD,UAAI,QAAQ,SAAS,QAAQ;AAC3B,eACE,oBAAC,SAAgB,WAAU,2CACxB,kBAAQ,WADD,KAEV;AAAA,MAEJ,WAAW,QAAQ,QAAQ,aAAa;AACtC,YAAI,oBAAoB,cAAc,CAAC,QAAQ,SAAS;AACtD,iBACE,oBAAC,SAAgB,WAAW,gDACzB,kBAAQ,MAAM,eADP,KAEV;AAAA,QAEJ,YACG,CAAC,cAAc,SAAS,SAAS,SAAS,MAC3C,CAAC,QAAQ,WACT,QAAQ,eACR;AACA,iBACE,oBAAC,SAAgB,WAAW,gDACzB,kBAAQ,OAAO,QADR,KAEV;AAAA,QAEJ,OAWK;AACH,iBACE,oBAAC,SAAgB,WAAW,gDAC1B,8BAAC,YAAS,SAAS,QAAQ,SAAS,KAD5B,KAEV;AAAA,QAEJ;AAAA,MACF;AAAA,IAgBF,CAAC;AAAA,IACD,oBAAC,SAAI,KAAK,gBAAgB;AAAA,KAC5B;AAEJ;AAEA,SAAS,oBAAoB,SAAwC;AACnE,MAAI,eAAyB,CAAC;AAC9B,MAAI,SAAS;AACX,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC1B,mBAAa,KAAK,GAAG,OAAO;AAAA,IAC9B,OAAO;AACL,mBAAa,KAAK,OAAO;AAAA,IAC3B;AAAA,EACF;AAEA,SAAO,aAAa,IAAI,CAAC,aAAa;AAAA,IACpC,IAAI,OAAO;AAAA,IACX,MAAM;AAAA,IACN,SAAS;AAAA,EACX,EAAE;AACJ;","names":[]}
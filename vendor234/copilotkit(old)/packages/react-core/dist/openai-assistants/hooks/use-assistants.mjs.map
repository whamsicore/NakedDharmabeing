{"version":3,"sources":["../../../src/openai-assistants/hooks/use-assistants.ts"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { processMessageStream } from \"../utils\";\nimport { Message, parseStreamPart } from \"@copilotkit/shared\";\n\nexport type AssistantStatus = \"in_progress\" | \"awaiting_message\";\n\nexport interface UseAssistantResult {\n  messages: Message[];\n  input: string;\n  handleInputChange: (e: any) => void;\n  submitMessage: (e: any) => Promise<void>;\n  status: AssistantStatus;\n  error: unknown;\n}\n\nexport function experimental_useAssistant({\n  api,\n  threadId: threadIdParam,\n}: {\n  api: string;\n  threadId?: string | undefined;\n}): UseAssistantResult {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [threadId, setThreadId] = useState<string | undefined>(undefined);\n  const [status, setStatus] = useState<AssistantStatus>(\"awaiting_message\");\n  const [error, setError] = useState<unknown | undefined>(undefined);\n\n  const handleInputChange = (e: any) => {\n    setInput(e.target.value);\n  };\n\n  const submitMessage = async (e: any) => {\n    e.preventDefault();\n\n    if (input === \"\") {\n      return;\n    }\n\n    setStatus(\"in_progress\");\n\n    setMessages((messages) => [...messages, { id: \"\", role: \"user\", content: input }]);\n\n    setInput(\"\");\n\n    const result = await fetch(api, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        // always use user-provided threadId when available:\n        threadId: threadIdParam ?? threadId ?? null,\n        message: input,\n      }),\n    });\n\n    if (result.body == null) {\n      throw new Error(\"The response body is empty.\");\n    }\n\n    await processMessageStream(result.body.getReader(), (message: string) => {\n      try {\n        const { type, value } = parseStreamPart(message);\n\n        switch (type) {\n          case \"assistant_message\": {\n            // append message:\n            setMessages((messages) => [\n              ...messages,\n              {\n                id: value.id,\n                role: value.role,\n                content: value.content[0].text.value,\n              },\n            ]);\n            break;\n          }\n\n          case \"assistant_control_data\": {\n            setThreadId(value.threadId);\n\n            // set id of last message:\n            setMessages((messages) => {\n              const lastMessage = messages[messages.length - 1];\n              lastMessage.id = value.messageId;\n              return [...messages.slice(0, messages.length - 1), lastMessage];\n            });\n\n            break;\n          }\n\n          case \"error\": {\n            setError(value);\n            break;\n          }\n        }\n      } catch (error) {\n        setError(error);\n      }\n    });\n\n    setStatus(\"awaiting_message\");\n  };\n\n  return {\n    messages,\n    input,\n    handleInputChange,\n    submitMessage,\n    status,\n    error,\n  };\n}\n"],"mappings":";;;;;;;;;;AAEA,SAAS,gBAAgB;AAEzB,SAAkB,uBAAuB;AAalC,SAAS,0BAA0B;AAAA,EACxC;AAAA,EACA,UAAU;AACZ,GAGuB;AACrB,QAAM,CAAC,UAAU,WAAW,IAAI,SAAoB,CAAC,CAAC;AACtD,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAS,EAAE;AACrC,QAAM,CAAC,UAAU,WAAW,IAAI,SAA6B,MAAS;AACtE,QAAM,CAAC,QAAQ,SAAS,IAAI,SAA0B,kBAAkB;AACxE,QAAM,CAAC,OAAO,QAAQ,IAAI,SAA8B,MAAS;AAEjE,QAAM,oBAAoB,CAAC,MAAW;AACpC,aAAS,EAAE,OAAO,KAAK;AAAA,EACzB;AAEA,QAAM,gBAAgB,CAAO,MAAW;AAlC1C;AAmCI,MAAE,eAAe;AAEjB,QAAI,UAAU,IAAI;AAChB;AAAA,IACF;AAEA,cAAU,aAAa;AAEvB,gBAAY,CAACA,cAAa,CAAC,GAAGA,WAAU,EAAE,IAAI,IAAI,MAAM,QAAQ,SAAS,MAAM,CAAC,CAAC;AAEjF,aAAS,EAAE;AAEX,UAAM,SAAS,MAAM,MAAM,KAAK;AAAA,MAC9B,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU;AAAA;AAAA,QAEnB,WAAU,6CAAiB,aAAjB,YAA6B;AAAA,QACvC,SAAS;AAAA,MACX,CAAC;AAAA,IACH,CAAC;AAED,QAAI,OAAO,QAAQ,MAAM;AACvB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAEA,UAAM,qBAAqB,OAAO,KAAK,UAAU,GAAG,CAAC,YAAoB;AACvE,UAAI;AACF,cAAM,EAAE,MAAM,MAAM,IAAI,gBAAgB,OAAO;AAE/C,gBAAQ,MAAM;AAAA,UACZ,KAAK,qBAAqB;AAExB,wBAAY,CAACA,cAAa;AAAA,cACxB,GAAGA;AAAA,cACH;AAAA,gBACE,IAAI,MAAM;AAAA,gBACV,MAAM,MAAM;AAAA,gBACZ,SAAS,MAAM,QAAQ,CAAC,EAAE,KAAK;AAAA,cACjC;AAAA,YACF,CAAC;AACD;AAAA,UACF;AAAA,UAEA,KAAK,0BAA0B;AAC7B,wBAAY,MAAM,QAAQ;AAG1B,wBAAY,CAACA,cAAa;AACxB,oBAAM,cAAcA,UAASA,UAAS,SAAS,CAAC;AAChD,0BAAY,KAAK,MAAM;AACvB,qBAAO,CAAC,GAAGA,UAAS,MAAM,GAAGA,UAAS,SAAS,CAAC,GAAG,WAAW;AAAA,YAChE,CAAC;AAED;AAAA,UACF;AAAA,UAEA,KAAK,SAAS;AACZ,qBAAS,KAAK;AACd;AAAA,UACF;AAAA,QACF;AAAA,MACF,SAASC,QAAP;AACA,iBAASA,MAAK;AAAA,MAChB;AAAA,IACF,CAAC;AAED,cAAU,kBAAkB;AAAA,EAC9B;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":["messages","error"]}
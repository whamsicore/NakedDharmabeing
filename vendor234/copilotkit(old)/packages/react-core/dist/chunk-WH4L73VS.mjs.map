{"version":3,"sources":["../src/hooks/use-make-copilot-actionable.ts"],"sourcesContent":["\"use client\";\n\nimport { useRef, useContext, useEffect, useMemo } from \"react\";\nimport { CopilotContext } from \"../context/copilot-context\";\nimport { AnnotatedFunction } from \"@copilotkit/shared\";\nimport { nanoid } from \"nanoid\";\n\nexport function useMakeCopilotActionable<ActionInput extends any[]>(\n  annotatedFunction: AnnotatedFunction<ActionInput>,\n  dependencies: any[],\n) {\n  const idRef = useRef(nanoid()); // generate a unique id\n  const { setEntryPoint, removeEntryPoint } = useContext(CopilotContext);\n\n  const memoizedAnnotatedFunction: AnnotatedFunction<ActionInput> = useMemo(\n    () => ({\n      name: annotatedFunction.name,\n      description: annotatedFunction.description,\n      argumentAnnotations: annotatedFunction.argumentAnnotations,\n      implementation: annotatedFunction.implementation,\n    }),\n    dependencies,\n  );\n\n  useEffect(() => {\n    setEntryPoint(idRef.current, memoizedAnnotatedFunction as AnnotatedFunction<any[]>);\n\n    return () => {\n      removeEntryPoint(idRef.current);\n    };\n  }, [memoizedAnnotatedFunction, setEntryPoint, removeEntryPoint]);\n}\n"],"mappings":";;;;;AAEA,SAAS,QAAQ,YAAY,WAAW,eAAe;AAGvD,SAAS,cAAc;AAEhB,SAAS,yBACd,mBACA,cACA;AACA,QAAM,QAAQ,OAAO,OAAO,CAAC;AAC7B,QAAM,EAAE,eAAe,iBAAiB,IAAI,WAAW,cAAc;AAErE,QAAM,4BAA4D;AAAA,IAChE,OAAO;AAAA,MACL,MAAM,kBAAkB;AAAA,MACxB,aAAa,kBAAkB;AAAA,MAC/B,qBAAqB,kBAAkB;AAAA,MACvC,gBAAgB,kBAAkB;AAAA,IACpC;AAAA,IACA;AAAA,EACF;AAEA,YAAU,MAAM;AACd,kBAAc,MAAM,SAAS,yBAAqD;AAElF,WAAO,MAAM;AACX,uBAAiB,MAAM,OAAO;AAAA,IAChC;AAAA,EACF,GAAG,CAAC,2BAA2B,eAAe,gBAAgB,CAAC;AACjE;","names":[]}
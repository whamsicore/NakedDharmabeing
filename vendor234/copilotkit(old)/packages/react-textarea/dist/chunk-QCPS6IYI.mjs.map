{"version":3,"sources":["../src/hooks/make-autosuggestions-function/use-make-standard-insertion-function.tsx"],"sourcesContent":["import { Message } from \"@copilotkit/shared\";\nimport { CopilotContext } from \"@copilotkit/react-core\";\nimport { useCallback, useContext } from \"react\";\nimport { MinimalChatGPTMessage } from \"../../types\";\nimport { retry } from \"../../lib/retry\";\nimport {\n  EditingEditorState,\n  Generator_InsertionOrEditingSuggestion,\n  InsertionEditorApiConfig,\n  InsertionEditorState,\n} from \"../../types/base/autosuggestions-bare-function\";\nimport { InsertionsApiConfig } from \"../../types/autosuggestions-config/insertions-api-config\";\nimport { EditingApiConfig } from \"../../types/autosuggestions-config/editing-api-config\";\nimport { DocumentPointer } from \"@copilotkit/react-core\";\nimport { fetchAndDecodeChatCompletionAsText } from \"@copilotkit/react-core\";\n\n/**\n * Returns a memoized function that sends a request to the specified API endpoint to get an autosuggestion for the user's input.\n * The function takes in the text before and after the cursor, and an abort signal.\n * It sends a POST request to the API endpoint with the messages array containing the system message, few shot messages, and user messages.\n * The function returns the suggestion from the API response.\n *\n * @param textareaPurpose - The purpose of the textarea. This is included in the system message.\n * @param apiEndpoint - The API endpoint to send the autosuggestion request to.\n * @param makeSystemMessage - A function that takes in a context string and returns a system message to include in the autosuggestion request.\n * @param fewShotMessages - An array of few shot messages to include in the autosuggestion request.\n * @param contextCategories - The categories of context strings we want to include. By default, we include the (default) \"global\" context category.\n * @returns A memoized function that sends a request to the specified API endpoint to get an autosuggestion for the user's input.\n */\nexport function useMakeStandardInsertionOrEditingFunction(\n  textareaPurpose: string,\n  contextCategories: string[],\n  insertionApiConfig: InsertionsApiConfig,\n  editingApiConfig: EditingApiConfig,\n): Generator_InsertionOrEditingSuggestion {\n  const { getContextString, copilotApiConfig } = useContext(CopilotContext);\n\n  const insertionFunction = useCallback(\n    async (\n      editorState: EditingEditorState,\n      insertionPrompt: string,\n      documents: DocumentPointer[],\n      abortSignal: AbortSignal,\n    ) => {\n      const res = await retry(async () => {\n        const messages: MinimalChatGPTMessage[] = [\n          {\n            role: \"system\",\n            content: insertionApiConfig.makeSystemPrompt(\n              textareaPurpose,\n              getContextString(documents, contextCategories),\n            ),\n          },\n          ...insertionApiConfig.fewShotMessages,\n          {\n            role: \"user\",\n            name: \"TextAfterCursor\",\n            content: editorState.textAfterCursor,\n          },\n          {\n            role: \"user\",\n            name: \"TextBeforeCursor\",\n            content: editorState.textBeforeCursor,\n          },\n          {\n            role: \"user\",\n            name: \"InsertionPrompt\",\n            content: insertionPrompt,\n          },\n        ];\n\n        const stream = await fetchAndDecodeChatCompletionAsText({\n          messages: messages as Message[],\n          ...insertionApiConfig.forwardedParams,\n          copilotConfig: copilotApiConfig,\n          signal: abortSignal,\n        });\n        return stream.events!;\n      });\n\n      return res;\n    },\n    [insertionApiConfig, getContextString, contextCategories, textareaPurpose],\n  );\n\n  const editingFunction = useCallback(\n    async (\n      editorState: EditingEditorState,\n      editingPrompt: string,\n      documents: DocumentPointer[],\n      abortSignal: AbortSignal,\n    ) => {\n      const res = await retry(async () => {\n        const messages: MinimalChatGPTMessage[] = [\n          {\n            role: \"system\",\n            content: editingApiConfig.makeSystemPrompt(\n              textareaPurpose,\n              getContextString(documents, contextCategories),\n            ),\n          },\n          ...editingApiConfig.fewShotMessages,\n          {\n            role: \"user\",\n            name: \"TextBeforeCursor\",\n            content: editorState.textBeforeCursor,\n          },\n          {\n            role: \"user\",\n            name: \"TextToEdit\",\n            content: editorState.selectedText,\n          },\n          {\n            role: \"user\",\n            name: \"TextAfterCursor\",\n            content: editorState.textAfterCursor,\n          },\n          {\n            role: \"user\",\n            name: \"EditingPrompt\",\n            content: editingPrompt,\n          },\n        ];\n\n        const stream = await fetchAndDecodeChatCompletionAsText({\n          messages: messages as Message[],\n          ...editingApiConfig.forwardedParams,\n          copilotConfig: copilotApiConfig,\n          signal: abortSignal,\n        });\n        return stream.events!;\n      });\n\n      return res;\n    },\n    [editingApiConfig, getContextString, contextCategories, textareaPurpose],\n  );\n\n  const insertionOrEditingFunction = useCallback(\n    async (\n      editorState: EditingEditorState,\n      insertionPrompt: string,\n      documents: DocumentPointer[],\n      abortSignal: AbortSignal,\n    ) => {\n      if (editorState.selectedText === \"\") {\n        return await insertionFunction(editorState, insertionPrompt, documents, abortSignal);\n      } else {\n        return await editingFunction(editorState, insertionPrompt, documents, abortSignal);\n      }\n    },\n    [insertionFunction, editingFunction],\n  );\n\n  return insertionOrEditingFunction;\n}\n"],"mappings":";;;;;;;;;;AACA,SAAS,sBAAsB;AAC/B,SAAS,aAAa,kBAAkB;AAYxC,SAAS,0CAA0C;AAe5C,SAAS,0CACd,iBACA,mBACA,oBACA,kBACwC;AACxC,QAAM,EAAE,kBAAkB,iBAAiB,IAAI,WAAW,cAAc;AAExE,QAAM,oBAAoB;AAAA,IACxB,CACE,aACA,iBACA,WACA,gBACG;AACH,YAAM,MAAM,MAAM,MAAM,MAAY;AAClC,cAAM,WAAoC;AAAA,UACxC;AAAA,YACE,MAAM;AAAA,YACN,SAAS,mBAAmB;AAAA,cAC1B;AAAA,cACA,iBAAiB,WAAW,iBAAiB;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,GAAG,mBAAmB;AAAA,UACtB;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAEA,cAAM,SAAS,MAAM,mCAAmC;AAAA,UACtD;AAAA,WACG,mBAAmB,kBAFgC;AAAA,UAGtD,eAAe;AAAA,UACf,QAAQ;AAAA,QACV,EAAC;AACD,eAAO,OAAO;AAAA,MAChB,EAAC;AAED,aAAO;AAAA,IACT;AAAA,IACA,CAAC,oBAAoB,kBAAkB,mBAAmB,eAAe;AAAA,EAC3E;AAEA,QAAM,kBAAkB;AAAA,IACtB,CACE,aACA,eACA,WACA,gBACG;AACH,YAAM,MAAM,MAAM,MAAM,MAAY;AAClC,cAAM,WAAoC;AAAA,UACxC;AAAA,YACE,MAAM;AAAA,YACN,SAAS,iBAAiB;AAAA,cACxB;AAAA,cACA,iBAAiB,WAAW,iBAAiB;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,GAAG,iBAAiB;AAAA,UACpB;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAEA,cAAM,SAAS,MAAM,mCAAmC;AAAA,UACtD;AAAA,WACG,iBAAiB,kBAFkC;AAAA,UAGtD,eAAe;AAAA,UACf,QAAQ;AAAA,QACV,EAAC;AACD,eAAO,OAAO;AAAA,MAChB,EAAC;AAED,aAAO;AAAA,IACT;AAAA,IACA,CAAC,kBAAkB,kBAAkB,mBAAmB,eAAe;AAAA,EACzE;AAEA,QAAM,6BAA6B;AAAA,IACjC,CACE,aACA,iBACA,WACA,gBACG;AACH,UAAI,YAAY,iBAAiB,IAAI;AACnC,eAAO,MAAM,kBAAkB,aAAa,iBAAiB,WAAW,WAAW;AAAA,MACrF,OAAO;AACL,eAAO,MAAM,gBAAgB,aAAa,iBAAiB,WAAW,WAAW;AAAA,MACnF;AAAA,IACF;AAAA,IACA,CAAC,mBAAmB,eAAe;AAAA,EACrC;AAEA,SAAO;AACT;","names":[]}